import logging
import sys
import os
import dotenv
import sqlite3
import requests
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import date, timedelta
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile
from aiogram.utils.markdown import hbold, hitalic

from keyboards.reply import greeting_keyboard, price_keyboard, oplata_keyboard_1_month, oplata_keyboard_2_month, \
    oplata_keyboard_3_month
from data.config import price_list, dostup_text, pic, problem, success, uncorrect_summ
from handlers import callbacks
from utils.statesform import GetWalletForm1, GetWalletForm2, GetWalletForm3

dotenv.load_dotenv(dotenv.find_dotenv())

bot = Bot(os.getenv('TG_TOKEN'))
dp = Dispatcher()


# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
@dp.message(CommandStart())
async def get_start(message: Message, bot: Bot):
    await message.answer(hbold("–ü—Ä–∏–≤–µ—Ç,", message.from_user.username) + "!\n\n"
                         f"–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –º–æ—é –ø—Ä–∏–≤–∞—Ç–∫—É.\n\n"
                         f"{hbold(f'–ê–î–ú–ò–ù: @tyoma5e')}",
                         parse_mode=ParseMode.HTML,
                         reply_markup=greeting_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø üìà")
async def dostup(message: Message, bot: Bot):
    await message.answer(hbold("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥:"),
                         parse_mode=ParseMode.HTML,
                         reply_markup=price_keyboard)


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü üë∂")
async def one_month(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[0])
    vid = FSInputFile(pic)
    await bot.send_video(message.from_user.id,
                         video=vid,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_1_month
                         )


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 2 –º–µ—Å—è—Ü–∞ ü§©")
async def two_months(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[1])
    vid = FSInputFile(pic)
    await bot.send_video(message.from_user.id,
                         video=vid,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_2_month
                         )


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞ üëë")
async def three_months(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[2])
    vid = FSInputFile(pic)
    await bot.send_video(message.from_user.id,
                         video=vid,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_3_month
                         )


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message, bot: Bot):
    await message.answer(hbold('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é‚Ü©Ô∏è'),
                         parse_mode=ParseMode.HTML,
                         reply_markup=greeting_keyboard)


# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message(F.text == "–û—Ç–º–µ–Ω–∞ ‚ùå")
async def cansel(message: Message, bot: Bot):
    await message.answer(hbold('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥:'),
                         parse_mode=ParseMode.HTML,
                         reply_markup=price_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 1 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üíµ")
async def confirm(message: Message):
    await tranzaction_info(message, 1)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 2 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üí∞")
async def confirm(message: Message):
    await tranzaction_info(message, 2)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 3 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üëë")
async def confirm(message: Message):
    await tranzaction_info(message, 3)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def tranzaction_info(message: Message, month):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    user_wallet = cursor.execute(f"SELECT wallet FROM users WHERE username='{message.from_user.id}'").fetchone()[
        0]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞—Ö —Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    r_link = f"https://api.trongrid.io/v1/accounts/{user_wallet}/transactions/trc20"
    data = requests.get(r_link, params={'limit': 3}, headers={"accept": "application/json"}).json()
    flag = False
    count = 0

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ç—Ä–∞–Ω–∑–∞–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π
    for tr in data.get('data', []):
        symbol = tr.get('token_info', {}).get('symbol')
        to = tr.get('to')

        v = tr.get('value', '')
        time_ = datetime.fromtimestamp(float(tr.get('block_timestamp', '')) / 1000)
        dec = -1 * int(tr.get('token_info', {}).get('decimals', '6'))
        f = float(v[:dec] + '.' + v[dec:])
        count += 1

        if (symbol == "USDT") and (to == os.getenv("TYOMA_WALLET")) and (datetime.today() - time_ < timedelta(days=30)):
            if month == 1:
                if 0 < f < 36:
                    cursor.execute(f"UPDATE users SET date_start = '{str(date.today())}', date_finish = "
                                   f"'{str(date.today() + timedelta(days=30))}' WHERE username = "
                                   f"'{message.from_user.id}'")
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML,
                                         reply_markup=greeting_keyboard)
                    flag = True
                    try:
                        await bot.send_message(chat_id=os.getenv("TYOMA_ID"),
                                               text=f"{message.from_user.username} –æ—Ñ–æ—Ä–º–∏–ª –¥–æ—Å—Ç—É–ø –≤ –≤–∏–ø–∫—É –Ω–∞ –º–µ—Å—è—Ü!")
                    except Exception as e:
                        pass

                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
            elif month == 2:
                if 69 < f < 71:
                    cursor.execute(f"UPDATE users SET date_start = '{str(date.today())}', date_finish = "
                                   f"'{str(date.today() + timedelta(days=60))}' WHERE username = "
                                   f"'{message.from_user.id}'")
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML,
                                         reply_markup=greeting_keyboard)
                    flag = True
                    try:
                        await bot.send_message(chat_id=os.getenv("TYOMA_ID"),
                                               text=f"{message.from_user.username} –æ—Ñ–æ—Ä–º–∏–ª –¥–æ—Å—Ç—É–ø –≤ –≤–∏–ø–∫—É –Ω–∞ –¥–≤–∞ –º–µ—Å—è—Ü–∞!")
                    except Exception as e:
                        pass

                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
            else:
                if 99 < f < 101:
                    cursor.execute(f"UPDATE users SET date_start = '{str(date.today())}', date_finish = "
                                   f"'{str(date.today() + timedelta(days=90))}' WHERE username = "
                                   f"'{message.from_user.id}'")
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML,
                                         reply_markup=greeting_keyboard)
                    flag = True
                    try:
                        await bot.send_message(chat_id=os.getenv("TYOMA_ID"),
                                               text=f"{message.from_user.username} –æ—Ñ–æ—Ä–º–∏–ª –¥–æ—Å—Ç—É–ø –≤ –≤–∏–ø–∫—É –Ω–∞ —Ç—Ä–∏ –º–µ—Å—è—Ü–∞!")
                    except Exception as e:
                        pass
                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
        else:
            if not flag and count == 3:
                await message.answer(problem)
    connection.commit()
    cursor.close()


async def checking():
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    users_list = cursor.execute("SELECT username, date_finish FROM users").fetchall()
    for item in users_list:
        if item[1] != '':
            if datetime.now() > datetime.strptime(item[1], '%Y-%m-%d'):
                try:
                    await bot.ban_chat_member(-1002079555410, item[0])
                    await bot.unban_chat_member(-1002079555410, item[0])
                    cursor.execute(f"DELETE FROM users WHERE username={item[0]}")
                except Exception as e:
                    try:
                        await bot.send_message(os.getenv("TYOMA_ID"),
                                               text=f"–í—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {item[0]} –∏—Å—Ç–µ–∫–ª–æ. –£–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é.")
                    except:
                        pass
    connection.commit()
    cursor.close()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 1 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form1, F.data == "oplata1")
dp.message.register(callbacks.get_wallet1, GetWalletForm1.GET_WALLET)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 2 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form2, F.data == "oplata2")
dp.message.register(callbacks.get_wallet2, GetWalletForm2.GET_WALLET)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 3 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form3, F.data == "oplata3")
dp.message.register(callbacks.get_wallet3, GetWalletForm3.GET_WALLET)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start():
    try:
        scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
        scheduler.add_job(checking, trigger='interval', hours=6)
        scheduler.start()
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(start())
