import asyncio
import logging
import sys
import os
import dotenv
import sqlite3
import requests
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hitalic

from keyboards.reply import greeting_keyboard, price_keyboard, oplata_keyboard_1_month, oplata_keyboard_2_month, \
    oplata_keyboard_3_month
from data.config import price_list, dostup_text, pic, problem, success, uncorrect_summ
from handlers import callbacks
from utils.statesform import GetWalletForm1, GetWalletForm2, GetWalletForm3

dotenv.load_dotenv(dotenv.find_dotenv())

bot = Bot(os.getenv('TG_TOKEN'))
dp = Dispatcher()


# –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ—Ä–∞–∑–∞
@dp.message(CommandStart())
async def get_start(message: Message, bot: Bot):
    await message.answer(hbold("–ü—Ä–∏–≤–µ—Ç,", message.from_user.username) + "!\n\n"
                         f"–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –≤ –º–æ—é –ø—Ä–∏–≤–∞—Ç–∫—É.\n\n"
                         f"{hitalic('–î–ª—è –ø–æ–º–æ—â–∏ –Ω–∞–ø–∏—à–∏ /help')}\n\n"
                         f"{hbold(f'–ê–î–ú–ò–ù: @tyoma5e')}",
                         parse_mode=ParseMode.HTML,
                         reply_markup=greeting_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø üìà")
async def dostup(message: Message, bot: Bot):
    await message.answer(hbold("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥:"),
                         parse_mode=ParseMode.HTML,
                         reply_markup=price_keyboard)


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü üë∂")
async def one_month(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[0])
    await bot.send_photo(message.from_user.id,
                         photo=pic,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_1_month
                         )


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 2 –º–µ—Å—è—Ü–∞ ü§©")
async def two_months(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[1])
    await bot.send_photo(message.from_user.id,
                         photo=pic,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_2_month
                         )


# –ö–Ω–æ–ø–∫–∞ 1 –º–µ—Å—è—Ü
@dp.message(F.text == "–î–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞ üëë")
async def three_months(message: Message, bot: Bot):
    text = dostup_text.substitute(price=price_list[2])
    await bot.send_photo(message.from_user.id,
                         photo=pic,
                         caption=text,
                         parse_mode=ParseMode.HTML,
                         reply_markup=oplata_keyboard_3_month
                         )


# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def back(message: Message, bot: Bot):
    await message.answer(hbold('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é‚Ü©Ô∏è'),
                         parse_mode=ParseMode.HTML,
                         reply_markup=greeting_keyboard)


# –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message(F.text == "–û—Ç–º–µ–Ω–∞ ‚ùå")
async def cansel(message: Message, bot: Bot):
    await message.answer(hbold('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø–µ—Ä–∏–æ–¥:'),
                         parse_mode=ParseMode.HTML,
                         reply_markup=price_keyboard)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 1 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üíµ")
async def confirm(message: Message):
    await tranzaction_info(message, 1)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 2 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üí∞")
async def confirm(message: Message):
    await tranzaction_info(message, 2)


# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ 3 –º–µ—Å—è—Ü–∞
@dp.message(F.text == "–ü–æ–¥–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ üëë")
async def confirm(message: Message):
    await tranzaction_info(message, 3)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def tranzaction_info(message: Message, month):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
    connection = sqlite3.connect('db/database.db')
    cursor = connection.cursor()
    user_wallet = cursor.execute(f"SELECT wallet FROM users WHERE username='{message.from_user.username}'").fetchone()[
        0]
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞—Ö —Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    r_link = f"https://api.trongrid.io/v1/accounts/{user_wallet}/transactions/trc20"
    data = requests.get(r_link, params={'limit': 3}, headers={"accept": "application/json"}).json()

    # –ü—Ä–æ—Ö–æ–¥ –ø–æ —Ç—Ä–∞–Ω–∑–∞–º –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–π
    for tr in data.get('data', []):
        symbol = tr.get('token_info', {}).get('symbol')
        to = tr.get('to')
        v = tr.get('value', '')

        dec = -1 * int(tr.get('token_info', {}).get('decimals', '6'))
        f = float(v[:dec] + '.' + v[dec:])

        if symbol == "USDT":
            if month == 1:
                if 34 < f < 36:
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML)
                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
            elif month == 2:
                if 69 < f < 71:
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML)
                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
            else:
                if 99 < f < 101:
                    link = await bot.create_chat_invite_link(chat_id=os.getenv("CHAT_ID"), member_limit=1)
                    await message.answer(success.substitute(link=link.invite_link), parse_mode=ParseMode.HTML)
                else:
                    text = uncorrect_summ.substitute(summ=hbold(str(f) + " USDT"))
                    await message.answer(text,
                                         parse_mode=ParseMode.HTML)
        else:
            await message.answer(problem)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 1 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form1, F.data == "oplata1")
dp.message.register(callbacks.get_wallet1, GetWalletForm1.GET_WALLET)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 2 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form2, F.data == "oplata2")
dp.message.register(callbacks.get_wallet2, GetWalletForm2.GET_WALLET)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–∞ –æ–ø–ª–∞—Ç—ã 3 –º–µ—Å—è—Ü–∞
dp.callback_query.register(callbacks.predup_form3, F.data == "oplata3")
dp.message.register(callbacks.get_wallet3, GetWalletForm3.GET_WALLET)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∞–π–ª
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(start())